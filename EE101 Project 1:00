#include <SoftwareSerial.h> //BLE library
#include <LowPower.h> //Power Saver Library
#include <EEPROM.h>
SoftwareSerial mySerial(6,7);  //BLE TX is on pin2 and RX on pin 
const int BuzzPin = 9; //buzzer pin
const int VRx = 5; //analogpins for joystick
const int VRy = 4; //^
const int sw = 8;  //^^
const int buttonPin = 12;  // the pin that the pushbutton is attached to
const int inputPin = 13;               // choose the input pin (for PIR sensor)
const int servopin=11;  //servopin
// Variables will change:
int servotimer = 50;        //time to move servo to new position
int buttonState = 0;        // current state of the button
int lastButtonState = 0;        // last state of the button
int switchState = 0;           //current state of joystick switch
int lastSwitchState = 0;      //last state of joystick switch
int buzztime = 500;       //amount of time the buzzer will be on for in ms
int val = 0;                    // variable for reading the motion sensor status
int pirState = LOW;             // we start, assuming no motion detected
int analogjoy = 0;           //analog joystick input
int ydir = 0;                //current mapped joystick y input
int xdir = 0;                //current mapped joystick x input
bool xmiddle = true;         //boolean flag triggered when x-axis returns to middle
bool ymiddle = true;         //boolean flag triggered when y-axis returns to middle
bool joyflag = false;        //flag to open/close programming loop
bool saveflag = false;       //
long timepress = 0;         //timer to record switch press time
long timerelease = 0;       //timer to record switch release time

//***************4x4*******************************************************************************************************
const int latchPin1 = 4;	// Latch pin of 74HC595 is connected to Digital pin 5
const int clockPin1 = 5;	// Clock pin of 74HC595 is connected to Digital pin 6
const int dataPin1 = 3;	// Data pin of 74HC595 is connected to Digital pin 4

const int latchPin2 = 1;	// Latch pin of 74HC595 is connected to Digital pin 1
const int clockPin2 = 2;	// Clock pin of 74HC595 is connected to Digital pin 2
const int dataPin2 = 0;	// Data pin of 74HC595 is connected to Digital pin 0

byte ledcol = 0;		// Variable to hold the pattern of which LEDs are currently turned on or off
byte ledrow = 0;
// byte ledcol1 = 0b00000001; //bytes that determine what leds in each column are turned on - only the last 4 digits are connected
// byte ledcol2 = 0b00000100;
// byte ledcol3 = 0b00000010;
// byte ledcol4 = 0b00000001;
//byte colchange = 1; //byte which changes the led position when programming
bool ledmatrix[4][4] = {{0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0}};   //matrix to store led values, initialized with no leds on
//variables to store cursor location
int xloc = 0; 
int yloc = 0;                
/*
 * setup() - this function runs once when you turn your Arduino on
 * We initialize the serial connection with the computer
 */
void setup() 
{
  // initialize the button pin as a input:
  pinMode(buttonPin, INPUT);
  //initialize motion sensor pin as input
  pinMode(inputPin, INPUT);
  //initialize servo pin as output
  pinMode(servopin, OUTPUT);
  // initialize buzzer pin as output
  pinMode(BuzzPin, OUTPUT);
  //initialize joystick swithc pin as input
  pinMode(sw, INPUT);
  // Set all the pins of 74HC595 as OUTPUT
  pinMode(latchPin1, OUTPUT);
  pinMode(dataPin1, OUTPUT);  
  pinMode(clockPin1, OUTPUT);
  pinMode(latchPin2, OUTPUT);
  pinMode(dataPin2, OUTPUT);  
  pinMode(clockPin2, OUTPUT);
  
  val = digitalRead(inputPin);  // read input value
  if (val == HIGH) {            // check if the input is HIGH
    if (pirState == LOW) {
      // we have just turned on
      mySerial.begin(9600);   
      delay(100);
      mySerial.write("AT\r\n");  //put HM10 in AT command mode
      delay(100);
      mySerial.write("AT+NAME ERBLE\r\n");  //Name our HM10 something so as to not interfere with others
      delay(100);
      mySerial.write("AT+NAME\r\n");  //Verify new name       delay(100);
      mySerial.write("AT+RESET\r\n");  //reset HM10 so new name will take effect
      mySerial.println("Motion detected!");
      mySerial.println("Loading the last route that was entered");
      //EEPROM retrieval - load the route for 5 seconds

      String storedString = readStringFromEEPROM(0);

      int stored_str_len = storedString.length() +1;
      char stored_char_array[stored_str_len];
      storedString.toCharArray(stored_char_array, stored_str_len);  // puts the input string into a char array
      // mySerial.println(storedString);
      // mySerial.print(stored_char_array);
      // mySerial.println();
      // make a boolean array of arrays of the last 4 digits of each row
      //bool stored_bArray[4][4];
      for (int i = 0; i < 4; i++){
        for (int j = 0; j < 4; j++){
          if ((stored_char_array [((i+1)*10) - 4 + j]) == '0'){
            ledmatrix[i][j] = 0;
          }
          else if ((stored_char_array[((i+1)*10) - 4 + j]) == '1'){
            ledmatrix[i][j] = 1;
          }
        }
      }
      // for (int i = 0; i < 4; i++){
      //   for (int j = 0; j < 4; j++){
      //     mySerial.print(ledmatrix[i][j]);
      //   }
      // }
      // mySerial.println();
      for (int t = 0; t <= 500; t++){
        for (int j = 0; j < 4; j++){
          ledcol = 0;
          ledrow = 0;	// Initially turns all the LEDs off, by giving the variable 'leds' the value 0
          updateShiftRegister();
          for (int i = 0; i < 4; i++){
            updateShiftRegister();
            if (ledmatrix[j][i] == 1){
              bitSet(ledcol,i);
              bitSet(ledrow,j);
              updateShiftRegister();
              delay(1);
            }
          }
        }
      }

      mySerial.println("Would you like to program a new route, load a route remotely or use the current route?");
      mySerial.println("Enter 'p' to program a new route, 'l' to load a route, or 'c' to keep the current route");
      char input = cGetCharFromPhone();
      mySerial.println(input);
      switch (input){
        case 'p':
          joyflag = true;
          mySerial.println("Entering Programming mode");
          mySerial.println("Use the joystick to navigate the board - press in to select a hold");
          mySerial.println("Press in and hold for two seconds when you are done selecting holds");
          for (int i = 0; i < 4; i++){
            for (int j = 0; j < 4; j++){
                ledmatrix[i][j] = 0;
            }
          }
          ledmatrix[0][0] = 1;
          break;
        
        case 'l':
          mySerial.println("Copy and paste the byte values that indicate which LEDs to illuminate:");
          //call get string from phone
          String sInString = sGetStringFromPhone();

          //save the string to EEPROM memory
          writeStringToEEPROM(0, sInString);

          int str_len = sInString.length() +1;
          char char_array[str_len];
          sInString.toCharArray(char_array, str_len);  // puts the input string into a char array

          // make a boolean array of the last 4 digits of each row
          //bool bArray[4][4];
          for (int i = 0; i < 4; i++){
            for (int j = 0; j < 4; j++){
              if ((stored_char_array [((i+1)*10) - 4 + j]) == '0'){
                ledmatrix[i][j] = 0;
              }
              else if ((stored_char_array[((i+1)*10) - 4 + j]) == '1'){
                ledmatrix[i][j] = 1;
              }
            }
          }
          wallAngle();
          break;
        
        case 'c':
          mySerial.println("Keeping the same route");
          wallAngle();
          break;
        
        default:
          mySerial.println("The input entered is not recognized, please reset the program and try again");
          break;
      }
      // We only want to print on the output change, not state
      pirState = HIGH;
    }
  } 
  else {
    if (pirState == HIGH){
      // we have just turned of
      Serial.println("Motion ended!");
      // We only want to print on the output change, not state
      LowPower.powerDown(SLEEP_2S, ADC_OFF, BOD_OFF);
      // Power saver while not in use
      pirState = LOW;
    }
  }
}




/*
 * loop() - this function runs over and over again
 */
void loop() 
{
  if (joyflag == true){
    analogjoy = analogRead(VRx);	// read X axis value [0..1023]
    if (analogjoy < 200){
      xdir = -1;
    }
    else if (400 <= analogjoy && analogjoy <= 600){
      xdir = 0;
    }
    else if (800 < analogjoy){
      xdir = 1;
    }
    analogjoy = analogRead(VRy);	// read Y axis value [0..1023]
    if (analogjoy < 200){
      ydir = -1;
    }
    else if (400 <= analogjoy && analogjoy <= 600){
      ydir = 0;
    }
    else if (800 < analogjoy){
      ydir = 1;
    }
    switchState = digitalRead(sw);
    // compare the switchState to its previous state
    if (switchState != lastSwitchState) {
      // if the state has changed, increment the counter
      
      
      if (switchState == HIGH) {
        // if the current state is HIGH then the button went from off to on:
        timepress = millis();
      } 
      else {
        // if the current state is LOW then the button went from on to off:
        timerelease = millis();
        if(1000 > (timerelease - timepress) && (timerelease - timepress) > 100 ){
          ledmatrix[xloc][yloc] = 1;
          saveflag = true;
        }
        else if ((timerelease - timepress) > 1500){
          joyflag = false;
          mySerial.println("Route Saved");
          String strToStore;               //start with array of bool arrays, convert to string
          // reading from global bool ledmatrix[4][4]
          for (int i = 0; i < 4; i++){
            strToStore += "0b0000";
            for (int j = 0; j < 4; j++){
              strToStore += ledmatrix[i][j];
            }
          }
          writeStringToEEPROM(0,strToStore);
          wallAngle();
        }
      }
    }
    // save the current state as the last state, for next time through the loop
    lastSwitchState = switchState; 

    switch(ydir){
      case 1:
        if (ymiddle == true){
          if (yloc > 0){
            if (saveflag == true){
              ledmatrix[xloc][yloc - 1] = 1;
              yloc = yloc -1;
              saveflag = false;
            }
            else{
              ledmatrix[xloc][yloc] = 0;
              ledmatrix[xloc][yloc - 1] = 1;
              yloc = yloc -1;
            }
          }
          ymiddle = false;
        }
        break;
      case 0:
        if (ymiddle == false){
          ymiddle = true;
        }
        break;
      case -1:
        if (ymiddle == true){
          if (yloc < 3){
            if (saveflag == true){
              ledmatrix[xloc][yloc + 1] = 1;
              yloc = yloc + 1;
              saveflag = false;
            }
            else{
              ledmatrix[xloc][yloc] = 0;
              ledmatrix[xloc][yloc + 1] = 1;
              yloc = yloc + 1;
            }
          }
          ymiddle = false;
        }
        break;
      default:
        break;
    }
    switch(xdir){
      case 1:
        if (xmiddle ==true){
          if (xloc < 3){
            if (saveflag == true){
              ledmatrix[xloc +1][yloc] = 1;
              xloc = xloc +1;
              saveflag = false;
            }
            else{
              ledmatrix[xloc][yloc] = 0;
              ledmatrix[xloc +1][yloc] = 1;
              xloc = xloc +1;
            }
          }
          xmiddle = false;
        }
        break;
      case 0:
        if (xmiddle == false){
          xmiddle = true;
        }
        break;
      case -1:
        if (xmiddle == true){
          if (xloc > 0){
            if (saveflag == true){
              ledmatrix[xloc - 1][yloc] = 1;
              xloc = xloc - 1;
              saveflag = false;
            }
            else{
              ledmatrix[xloc][yloc] = 0;
              ledmatrix[xloc - 1][yloc] = 1;
              xloc = xloc - 1;
            }
          }
          xmiddle = false;
        }
        break;
      default:
        break;
    }
    
  }
  
  for (int j = 0; j < 4; j++){
    ledcol = 0;
    ledrow = 0;	// Initially turns all the LEDs off, by giving the variable 'leds' the value 0
    updateShiftRegister();
    for (int i = 0; i < 4; i++){
      updateShiftRegister();
      if (ledmatrix[j][i] == 1){
        bitSet(ledcol,i);
        bitSet(ledrow,j);
        updateShiftRegister();
        delay(1);
      }
    }
  }
  // read the pushbutton input pin:
  buttonState = digitalRead(buttonPin);
  // compare the buttonState to its previous state
  if (buttonState != lastButtonState) {
    // if the state has changed, increment the counter
    if (buttonState == HIGH) {
      // if the current state is HIGH then the button went from off to on:
      
    } 
    else {
      // if the current state is LOW then the button went from on to off:
      for (int i = 0; i <= buzztime; i++){
        digitalWrite(BuzzPin, HIGH);
        delay(1);
        digitalWrite(BuzzPin, LOW);
      }
    }
    lastButtonState = buttonState;    // save the current state as the last state, for next time through the loop
  }
}
/*
 * updateShiftRegister() - This function sets the latchPin to low, then calls the Arduino function 'shiftOut' to shift out contents of variable 'leds' in the shift register before putting the 'latchPin' high again.
 */
void updateShiftRegister(){

   digitalWrite(latchPin2, LOW);
   shiftOut(dataPin2, clockPin2, LSBFIRST, ledcol);
   digitalWrite(latchPin2, HIGH);

   digitalWrite(latchPin1, LOW);
   shiftOut(dataPin1, clockPin1, LSBFIRST, ledrow);
   digitalWrite(latchPin1, HIGH);  
}

//function cgetcharfromphone - inputs:none returns:char
char cGetCharFromPhone(){
  int IInByte;                            //declare local variable
  while (mySerial.available() == 0) {}     //wait for data available
  IInByte = mySerial.read();               //read character
  return(char(IInByte));
}
//function wallangle - inputs:none returns:none
void wallAngle(){
  mySerial.println("Would you like the wall at an angle? enter 'y' for yes and 'n' for no");
  char angle = cGetCharFromPhone();
  switch (angle){
    case 'y':
      //change servo angle
      for (int i=0; i <= servotimer; i++){
        digitalWrite(servopin,HIGH);
        delay(2);
        digitalWrite(servopin,LOW);
        delay(18);  
      }
      break;
    
    case 'n':
      //reset servo angle
      for (int i=0; i <= servotimer; i++){
        digitalWrite(servopin,HIGH);
        delay(1.5);
        digitalWrite(servopin,LOW);
        delay(18.5);  
      }
      break;
    default:
      mySerial.println("The input entered is not recognized, please reset the program and try again");
      break;
  }
}

//function sGetStrFromPhone - inputs: none returns: string
String sGetStringFromPhone(){
  String inputString;
  while (mySerial.available() == 0) {}
  inputString = mySerial.readString();
  inputString.trim();                       // removes any \r \n whitespace
  return(inputString);
}

// writes a string to EEPROM with a byte at the front indicating the string's length
// converts the string to bytes
// from "https://roboticsbackend.com/arduino-write-string-in-eeprom/"
void writeStringToEEPROM(int addrOffset, String strToWrite)
{
  byte len = strToWrite.length();
  EEPROM.write(addrOffset, len);

  for (int i = 0; i < len; i++)
  {
    EEPROM.write(addrOffset + 1 + i, strToWrite[i]);
  }
}

// reads and returns a string from EEPROM, converts back from byte
// from "https://roboticsbackend.com/arduino-write-string-in-eeprom/"
String readStringFromEEPROM(int addrOffset)
{
  int newStrLen = EEPROM.read(addrOffset);
  char data[newStrLen + 1];

  for (int i = 0; i < newStrLen; i++)
  {
    data[i] = EEPROM.read(addrOffset + 1 + i);
  }
  data[newStrLen] = '\0';

  return String(data);
}
